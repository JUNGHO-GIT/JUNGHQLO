[ SSH ] ============================================================================================
1. 키 생성
	= !!!!!!!!!!!!!!!! username 에는 인스턴스에 등록된 아이디만 (junghomun00) !!!!!!!!!!!!!!!!!!!!!!
	= !!!!!!!!!!!!!!!! username 값 넣으려면 "" 따옴표 무조건 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	= !!!!!!!!!!!!!!!! username 씨발 마지막에 공백이나 줄나눔있으면 인식안됨 !!!!!!!!!!!!!!!!!!!!!!!!
	= ssh-keygen -t rsa -f C:\Users\jungh\.ssh\JKEY -C "junghomun00"

2. gcloud 키 추가
	= gcloud compute project-info add-metadata --metadata-from-file ssh-keys=C:\Users\jungh\.ssh\JKEY.pub

3. ssh 로 접속
	= 104.196.212.101
	= ssh -i C:\Users\jungh\.ssh\JKEY junghomun00@104.196.212.101
====================================================================================================



[ GIT ] ============================================================================================
1. 특정단어 포함된 커밋 찾기
	= git log -G "FOO" -- client/src/assets/layouts/TopNav.jsx

2. 변경된 내용도 함께 보기
	= git log -p -G "FOO" -- client/src/assets/layouts/TopNav.jsx

3. 변경내역 확인하기
	= git reflog show --date=iso
====================================================================================================



[ CURL ] ===========================================================================================
1. curl 테스트
	= curl -d "user_id=123&user_pw=123" -H "Content-Type: application/x-www-form-urlencoded" -X POST http://104.196.212.101:4000/api/user/login
====================================================================================================



[ YUM ] ============================================================================================
1. YUM 캐시삭제
	= sudo yum clean all
	= sudo yum makecache
====================================================================================================



[ CRON ] ===========================================================================================
1. cron 설정
	= crontab -e
====================================================================================================



[ LNAV, MICRO ] ====================================================================================
1. 최신순 정렬
	= relative-goto 100%
	= save-session

2. bashrc
  = """
    # .bashrc
    export HOME="/C/JUNGHO/1.Language/3.GIT/bash"
    export PATH="$PATH:/C/JUNGHO/1.Language/3.GIT/bash"

    # User specific aliases and functions
    alias cd='cd'
    alias CD='cd'
    alias rm='rm -rf -i'
    alias RM='rm -rf -i'
    alias cp='cp -i'
    alias CP='cp -i'
    alias mv='mv -i'
    alias MV='mv -i'
    alias ls='ls -a --color=auto'
    alias LS='ls -a --color=auto'

    # Include hidden files by default in wildcard operations
    setopt globdots

    # Source global definitions
    if [ -t 1 ]; then
      exec zsh
    fi
  """

3. zshrc
  = """
    # 홈 디렉토리와 PATH 설정
    export HOME="/C/JUNGHO/1.Language/3.GIT/bash"
    export PATH="$PATH:/C/JUNGHO/1.Language/3.GIT/bash"

    # User specific aliases and functions
    alias cd='cd'
    alias CD='cd'
    alias rm='rm -rf -i'
    alias RM='rm -rf -i'
    alias cp='cp -i'
    alias CP='cp -i'
    alias mv='mv -i'
    alias MV='mv -i'
    alias ls='ls -a --color=auto'
    alias LS='ls -a --color=auto'

    # Include hidden files by default in wildcard operations
    setopt globdots

    # 기본 셸을 bash로 변경하고 싶지 않다면 아래 exec는 생략
    # exec zsh

    # Global 설정 불러오기 (zsh에서 기본 제공되는 설정)
    if [ -f /etc/zshrc ]; then
      source /etc/zshrc
    fi
  """
====================================================================================================


[ NPM ] ============================================================================================
1. legacy-peer-deps 설정
	= npm config set legacy-peer-deps true
====================================================================================================


[ GCP-INSTANCE ] ===================================================================================
1. gcloud 명령어
	= gcloud config set project ancient-ceiling-377105
	= gcloud compute ssh --project=ancient-ceiling-377105 --zone=us-east1-b instance-1
	= ssh -i C:\Users\jungh\.ssh\JKEY junghomun00@104.196.212.101

2. 내부 아이피
	= 10.142.0.2

3. 외부 아이피
	= 104.196.212.101

4. 포트찾기
	= sudo ss -lptn 'sport = :80'
	= netstat -tnlp|grep 80
	= sudo lsof -i :443

4. 현재 열려있는 포트 확인
	= sudo netstat -tuln

5. 포트 죽이기
	= sudo kill -9 PID번호

6. 방화벽 활성존 확인
	= firewall-cmd --get-active-zones
	= (!!!!!!!!!!!!!!!!!!! public 사용하기 !!!!!!!!!!!!!!)
	= !!!!!!!!!!!!!!!!!!!! trusted 사용금지 !!!!!!!!!!!!!)

6. 방화벽 기본 존 설정
	= sudo firewall-cmd --set-default-zone=public

6. 방화벽 상태 확인
	= sudo firewall-cmd --zone=public --list-all
	= sudo firewall-cmd --list-all

7. 방화벽 규칙 추가
	= (!!!!!!!!!!!!! 규칙추가할때 public 에다가 추가하기 !!!!!!!!!!!!!)
	= firewall-cmd --add-port=80/tcp --permanent

8. 방화벽 리로드
	= firewall-cmd --reload

8. 방화벽 재시작
	= sudo systemctl restart firewalld

9. 방화벽 삭제
	= sudo firewall-cmd --zone=public --remove-port=27017/tcp --permanent

9. 현재 실행중인 서비스 확인
	= systemctl list-units --type=service --state=running
	= service --status-all

10. 시스템 파일 청소
	= bleachbit --clean system.cache
	= bleachbit --clean system.cache system.localizations
	= package-cleanup --oldkernels --count=2
====================================================================================================


[ SELINUX ] ========================================================================================
1. 상태 확인
	= getenforce

2. Enforcing
	= SELinux 보안 정책을 강제 적용합니다. 정책을 위반하는 작업은 차단되고 로그에 기록됩니다.

3. Permissive
	= SELinux 보안 정책을 강제 적용하지 않지만, 정책을 위반하는 작업은 로그에 기록됩니다.

4. Disabled
	= SELinux가 비활성화되어 있습니다.
====================================================================================================


[ SSL ] ============================================================================================
1. Certbot 설치
	= sudo yum install epel-release
	= sudo yum install certbot
	= sudo yum install python2-certbot-nginx

2. Certbot을 사용하여 SSL 인증서 발급
	= sudo certbot --nginx

3. 인증서 파일
	= /etc/letsencrypt/live/www.junghomun.com/cert.pem

4. 개인 키 파일
	= /etc/letsencrypt/live/www.junghomun.com/privkey.pem

5. 체인 파일
	= /etc/letsencrypt/live/www.junghomun.com/chain.pem

6. 전체 체인
	= /etc/letsencrypt/live/www.junghomun.com/fullchain.pem

7. ssl 확인
	= openssl s_client -connect 104.196.212.101:443 -servername www.junghomun.com </dev/null 2>/dev/null | openssl x509 -noout -text
====================================================================================================


[ NGINX ] ==========================================================================================
1. 설치
	= sudo yum install epel-release -y
	= sudo yum install nginx -y

2. 부팅시 자동시작
	= sudo systemctl enable nginx
	= sudo systemctl start nginx

3. 재시작
	= sudo systemctl restart nginx

3. 설정파일
	= micro /etc/nginx/nginx.conf

4. 로그파일
	= lnav -f /var/log/nginx/access.log
	= lnav -f /var/log/nginx/error.log

5. 방화벽 설정
	= sudo firewall-cmd --add-port=80/tcp --permanent
	= sudo firewall-cmd --reload
====================================================================================================


[ APACHE ] =========================================================================================
1. 서버 시작
	= sudo systemctl start httpd

2. 서버 재시작
	= sudo systemctl restart httpd

4. 서버 상태
	= sudo systemctl status httpd.service -l

5. 아파치 https 가능하게 하도록 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	= sudo setsebool -P httpd_can_network_connect 1

6. 아파치 포트 변경
	= sudo semanage port -a -t http_port_t -p tcp 4000

7. 로그 확인
	= sudo lnav -f /etc/httpd/logs/access_log
	= sudo lnav -f /etc/httpd/logs/access_log

8. 웹루트 위치
	= cd /var/www/html

10. 설정파일 위치
	= micro /etc/httpd/conf/httpd.conf

11. 방화벽 설정
	= sudo firewall-cmd --add-port=80/tcp --permanent
	= sudo firewall-cmd --reload
====================================================================================================


[ PM2 ] ============================================================================================
1. pm2 설치
	= npm install pm2@latest -g

2. 실행
	= pm2 start index.js --name JPAGE

3. 부팅시 자동실행
	= pm2 startup
	= pm2 save

3. 상태 확인
	= pm2 status

4. 로그 확인
	= pm2 logs

5. 재시작
	= pm2 restart --all

6. 종료
	= pm2 stop index.js
	= pm2 delete index.js

7. 모니터링
	= pm2 monit

8. 방화벽 설정파일
	= sudo firewall-cmd --add-port=4000/tcp --permanent
	= sudo firewall-cmd --add-port=4100/tcp --permanent
	= sudo firewall-cmd --reload
====================================================================================================


[ TOMCAT ] =========================================================================================
1. 톰캣 매니저 설정 (주석처리)
	= cd tomcat9/webapps/manager/META-INF/context.xml

2. 톰캣 실행
	= cd /usr/share/tomcat9/bin

2. 톰캣 웹앱
	= cd /usr/share/tomcat9/webapps

3. 톰캣 상태
	= sudo systemctl status tomcat9

4. 톰캣 로그
	= lnav -f /usr/share/tomcat9/logs/catalina.out

5. 톰캣 사용자 권한 (사용자 번경!!!!!!!!!!!!!)
	= sudo chown -R tomcat:tomcat /usr/share/tomcat9
	= sudo chmod -R 755 /usr/share/tomcat9/

6. 톰캣 서비스 등록
	= cd /etc/systemd/system/
	= touch tomcat9.service
	= """
    [Unit]
    Description=Apache Tomcat Web Application Container
    After=network.target

    [Service]
    Type=forking

    Environment=JAVA_HOME=/usr/lib/jvm/jre
    Environment=CATALINA_PID=/usr/share/tomcat9/temp/tomcat.pid
    Environment=CATALINA_HOME=/usr/share/tomcat9
    Environment=CATALINA_BASE=/usr/share/tomcat9
    Environment='CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC'
    Environment='JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom'

    ExecStart=/usr/share/tomcat9/bin/startup.sh
    ExecStop=/usr/share/tomcat9/bin/shutdown.sh

    User=tomcat
    Group=tomcat
    UMask=0007
    RestartSec=10
    Restart=always

    [Install]
    WantedBy=multi-user.target
  """
  = sudo systemctl daemon-reload
  = sudo systemctl enable tomcat9
  = sudo systemctl start tomcat9
====================================================================================================


[ MYSQL ] ==========================================================================================
1. 설치
	= sudo rpm -ivh http://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm
	= sudo yum install mysql-community-server

2. 서비스 시작
	= sudo systemctl start mysqld

3. 자동부팅 활성화
	= sudo systemctl enable mysqld

3. 방화벽 열기 (존나중요함 !!!!!!!!!!!!!!!!!!!!!!!!!!1)
	= sudo firewall-cmd --zone=public --add-port=3306/tcp --permanent
	= sudo firewall-cmd --reload

4. 임시비번 확인
	= sudo grep 'temporary password' /var/log/mysqld.log

5. 연결이름
	= 104.196.212.101:3306

7. 아이디 (씨발 대문자 주의 개씨발년!!!!!!!!!!!!!)
	= root / M7m7m7m7m7!

9. conf 파일
	= /etc/my.cnf

9. logs 파일
	= /var/log/mysqld.log

10. DB 삭제
	= DROP DATABASE [database_name];

11. DB 생성
	= CREATE DATABASE [database_name];

12. DB 덤프
	= mysql -u root -p [database_name] < [dump_file.sql]

13. DB 백업
	= mysqldump -u root -p [database_name] > [dump_file.sql]
====================================================================================================


[ MONGODB ] ========================================================================================
1. 쉘파일 생성 (/etc/yum.conf.d/mongodb-org.6.0.repo)
  = """
    [mongodb-org-6.0]
    name=MongoDB Repository
    baseurl=https://repo.mongodb.org/yum/redhat/7/mongodb-org/6.0/x86_64/
    gpgcheck=1
    enabled=1
    gpgkey=https://pgp.mongodb.com/server-6.0.asc
  """

2. 몽고쉘 설치
	= sudo yum install -y mongodb-org
	= sudo yum install -y mongodb-org-shell

3. 포트번호
	= 104.196.212.101:27017

3. 설정파일
	= sudo micro /etc/mongod.conf

4. 시작
	= sudo systemctl start mongod

5. 재시작
	= sudo systemctl restart mongod

6. 상태
	= sudo systemctl status mongod
 	= sudo ps aux | grep mongod
	= sudo service mongod status

7. 로그 확인
	= sudo lnav -50 /var/log/mongodb/mongod.log | grep error
	= sudo micro /var/log/mongodb/mongod.log

8. 서비스 수정
	= sudo micro /usr/lib/systemd/system/mongod.service

9. 서비스 시작
	= sudo systemctl daemon-reload
	= sudo systemctl enable mongod
	= sudo systemctl start mongod

10. 서비스 강제종료
	= sudo systemctl stop mongod
	= sudo kill -9 [PID]

10. 서비스 비활성화
	= sudo systemctl disable mongodb

11. sock 파일 삭제
	= sudo rm /tmp/mongodb-27017.sock

12. 14에러 해결
	= sudo chown mongod:mongod/tmp/mongodb-27017.sock
	= sudo systemctl start mongod

13. 사용자 추가
	= sudo useradd -r -m -s /bin/false mongod

14. 권한설정
  = sudo chown mongod:mongod /var/lib/mongo
  = sudo chown mongod:mongod /var/log/mongodb
  = sudo chown mongod:mongod /tmp/mongodb-27017.sock

15. 백업
  = mongodump --host $MONGO_HOST --username $MONGO_USER --password $MONGO_PASSWORD --authenticationDatabase $MONGO_AUTH_DB --out $BACKUP_PATH

16. 덮어씌우기
	= mongorestore --drop --host 104.196.212.101 --username eric4757 --password M7m7m7m7m7m7! --authenticationDatabase admin --nsFrom 'LIFECHANGE_TEST.*' --nsTo 'LIFECHANGE_TEST.*' JPAGE_mongo_backup_2024-08-04-09-21

	= mongorestore --drop --host 104.196.212.101 --username eric4757 --password M7m7m7m7m7m7! --authenticationDatabase admin --nsFrom 'LIFECHANGE.*' --nsTo 'LIFECHANGE.*' user.bson

	= mongorestore --drop --host 104.196.212.101 --username eric4757 --password M7m7m7m7m7m7! --authenticationDatabase admin --nsFrom 'LIFECHANGE.*' --nsTo 'LIFECHANGE.*' JPAGE_mongo_backup_2024-11-01-21-00

17. 몽고쉘 접속
  = (mongod 아님 주의 !!!!!!!!!!!!!)
  = (m7 6번이다 씨발아 !!!!!!!!!)
	= mongosh -u eric4757 -p M7m7m7m7m7m7! --authenticationDatabase "admin"

18. 디비 생성
  = use LIFECHANGE

19. 유저 생성 (전체 DB 권한)
	= use admin
	= db.createUser({
      user: "eric4757",
      pwd: "M7m7m7m7m7m7!",
      roles: [
        { role: "userAdminAnyDatabase", db: "admin" },
        { role: "readWriteAnyDatabase", db: "admin" },
        { role: "dbAdminAnyDatabase", db: "admin" },
        { role: "root", db: "admin" }
      ]
    })

20. 유저 생성 (특정 DB 권한)
	= use LIFECHANGE
  = db.createUser({
      user: "eric4757",
      pwd: "M7m7m7m7m7m7!",
      roles: [
        { role: "userAdmin", db: "LIFECHANGE" },
        { role: "readWrite", db: "LIFECHANGE" },
        { role: "dbAdmin", db: "LIFECHANGE" }
      ]
    })

	= use LIFECHANGE_TEST
	= db.createUser({
      user: "eric4757",
      pwd: "M7m7m7m7m7m7!",
        roles: [
        { role: "userAdmin", db: "LIFECHANGE_TEST" },
        { role: "readWrite", db: "LIFECHANGE_TEST" },
        { role: "dbAdmin", db: "LIFECHANGE_TEST" }
      ]
    })

	= use PAJUKAESONG
	= db.createUser({
      user: "eric4757",
      pwd: "M7m7m7m7m7m7!",
      roles: [
        { role: "userAdmin", db: "PAJUKAESONG" },
        { role: "readWrite", db: "PAJUKAESONG" },
        { role: "dbAdmin", db: "PAJUKAESONG" },
      ]
    })

21. 패키지 삭제
	= sudo yum remove mongodb-org*
	= sudo yum autoremove

22. 로그파일 삭제
	= sudo rm -rf /var/lib/mongo
	= sudo rm -rf /var/log/mongodb

23. 구성파일 삭제
	= sudo rm /etc/mongod.conf
	= sudo rm /etc/yum.repos.d/mongod-org.6.0.repo
	= sudo rm /etc/yum.repos.d/mongodb-org-6.0.repo

24. 사용자그룹 삭제
	= sudo userdel -r mongodb

40. 방화벽 설정
	= sudo firewall-cmd --zone=public --add-port=27017/tcp --permanent
	= sudo ufw enable
	= sudo ufw allow from YourTrustedIP to any port 27017
	= sudo ufw deny 27017
	= sudo firewall-cmd --reload
====================================================================================================